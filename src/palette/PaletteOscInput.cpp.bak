#include <math.h>
#include <string>
#include <sstream>
#include <intrin.h>
#include <float.h>

#include "PaletteFF.h"
#include "NosuchUtil.h"
#include "NosuchOscInput.h"
#include "PaletteOscInput.h"
#include "NosuchOscTcpInput.h"
#include "NosuchOscUdpInput.h"

PaletteOscInput::PaletteOscInput(const char* host, int port) : NosuchOscMessageProcessor() {

	NosuchDebug(2,"PaletteOscInput constructor port=%d",port);
	// _seq = -1;
	// _tcp = new NosuchOscTcpInput(host,port);
	_tcp = NULL;
	_udp = new NosuchOscUdpInput(host,port,this);
}

PaletteOscInput::~PaletteOscInput() {
	if ( _tcp )
		delete _tcp;
	if ( _udp )
		delete _udp;
}

void
PaletteOscInput::AddOscProcessor(NosuchOscMessageProcessor* processor) {
	_processors.push_back(processor);
}

void
PaletteOscInput::RemoveOscProcessor(NosuchOscMessageProcessor* processor) {
	_processors.remove(processor);
}

void
PaletteOscInput::ProcessOscMessage(const char *source, const osc::ReceivedMessage& m) {
	for ( std::list<NosuchOscMessageProcessor*>::iterator i=_processors.begin(); i != _processors.end(); i++ ) {
		NosuchOscMessageProcessor* mp = *i;
		NosuchAssert(mp);
		mp->ProcessOscMessage(source,m);
	}
}

void
PaletteOscInput::Check() {
	if ( _tcp )
		_tcp->Check();
	if ( _udp )
		_udp->Check();
}

void
PaletteOscInput::UnListen() {
	if ( _tcp )
		_tcp->UnListen();
	if ( _udp )
		_udp->UnListen();
}

int
PaletteOscInput::Listen() {
	int e;
	if ( _tcp ) {
		if ( (e=_tcp->Listen()) != 0 ) {
			NosuchDebug("Error in _tcp->Listen = %d\n",e);
			return e;
		}
	}
	if ( _udp ) {
		if ( (e=_udp->Listen()) != 0 ) {
			NosuchDebug("Error in _udp->Listen = %d\n",e);
			return e;
		}
	}
	return 0;
}
