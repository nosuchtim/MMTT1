#include <iostream>
#include <fstream>
#include <stdio.h>
#include <pthread.h>
#include <windows.h>	   // Standard header for MS Windows applications
#include <GL/gl.h>		   // Open Graphics Library (OpenGL) header
#include <GL/glut.h>	   // The GL Utility Toolkit (GLUT) Header
 
#include "stdint.h"
#include "libfreenect.h"
#include "NosuchHttp.h"
#include "mmtt.h"
 
#define KEY_ESCAPE 27
#define g_rotation_speed 0.2
float g_rotation;

using namespace std;
 
/************************************************************************************
 *  Rest of code
 ************************************************************************************/
 
 
typedef struct {
    int width;
	int height;
	char* title;
 
	float field_of_view_angle;
	float z_near;
	float z_far;
} glutWindow;
glutWindow win;
 
void
maketexture( GLuint texture, BYTE * data, int width, int height)
{
    // select our current texture
    glBindTexture( GL_TEXTURE_2D, texture );

	glTexImage2D(GL_TEXTURE_2D, 0,GL_RGB,
		width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);

	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);

}

void display() 
{
	ThisApp->update();

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);		// Clear Screen and Depth Buffer
	glLoadIdentity();
	// gluLookAt( 4,2,0, 0,0,0, 0,1,0);					    // Define a viewing transformation

	glPixelStorei (GL_UNPACK_ROW_LENGTH, ThisApp->textureWidth());
 
	unsigned char *pix = ThisApp->ffpixels();

	static bool initialized = false;
	static GLuint texture;
	if ( ! initialized ) {
		initialized = true;
	    glGenTextures( 1, &texture );
	}
	glEnable( GL_TEXTURE_2D );
	maketexture(texture, pix, ThisApp->textureWidth(), ThisApp->textureHeight());
	glTranslatef(0.0f,0.0f,-2.5f);
	glBegin(GL_QUADS);									// Draw A Quad
	glTexCoord2d(0.0,0.0); glVertex3f(-1.0f, 1.0f, 0.0f);	// Top Left
	glTexCoord2d(1.0,0.0); glVertex3f( 1.0f, 1.0f, 0.0f);	// Top Right
	glTexCoord2d(1.0,1.0); glVertex3f( 1.0f,-1.0f, 0.0f);	// Bottom Right
	glTexCoord2d(0.0,1.0); glVertex3f(-1.0f,-1.0f, 0.0f);	// Bottom Left
	glEnd();			

	glutSwapBuffers();
}
 
 
void initialize() 
{
    glMatrixMode(GL_PROJECTION);												// select projection matrix
    glViewport(0, 0, win.width, win.height);									// set the viewport
    glMatrixMode(GL_PROJECTION);												// set matrix mode
    glLoadIdentity();															// reset projection matrix
    GLfloat aspect = (GLfloat) win.width / win.height;
	gluPerspective(win.field_of_view_angle, aspect, win.z_near, win.z_far);		// set up a perspective projection matrix

    glMatrixMode(GL_MODELVIEW);													// specify which matrix is the current matrix

	glClearColor(0.0, 0.0, 0.0, 1.0);
 
}
 
 
void keyboard ( unsigned char key, int mousePositionX, int mousePositionY )		
{ 
	switch ( key ) {
	case KEY_ESCAPE:        
		exit ( 0 );   
		break;      
	default:      
		break;
	}
}
 
int main(int argc, char **argv) 
{
	MmttApp* app = new MmttApp();

	app->prepareSettings(argc,argv);

	if ( NosuchNetworkInit() ) {
		NosuchDebug("Unable to initialize networking?");
		exit(1);
	}

	app->setup();

	// set window values
	win.width = 640;
	win.height = 480;
	win.title = "MultiMultiTouchTouch V2";
	win.field_of_view_angle = 45;
	win.z_near = 1.0f;
	win.z_far = 500.0f;
 
	// initialize and run program
	glutInit(&argc, argv);                                      // GLUT initialization
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH );  // Display Mode
	glutInitWindowSize(win.width,win.height);					// set window size
	glutCreateWindow(win.title);								// create Window
	glutDisplayFunc(display);									// register Display Function
	glutIdleFunc( display );									// register Idle Function
    glutKeyboardFunc( keyboard );								// register Keyboard Handler
	initialize();
	glutMainLoop();												// run GLUT mainloop
	return 0;
}

int WINAPI
oldWinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance,
                    LPSTR lpszCmdParam, int nCmdShow)
{
	static char szAppName[] = "KeyKit" ;
	static char *argv[6];	/* static to avoid putting on stack */
	int n;
	char *s, *p;

	n=0;
	argv[n++] = "key";
	s = _strdup(lpszCmdParam); /* afraid to alter lpszCmdParam in-place */
	for ( p=strtok(s," "); p!=NULL; p=strtok(NULL," ") ) {
			argv[n++] = p;
	}
	argv[n] = NULL;
	return main(n, argv);
}